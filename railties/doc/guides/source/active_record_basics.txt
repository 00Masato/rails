Active Record Basics
====================

This guide will give you a strong grasp of the Active Record pattern and how it can be used with or without Rails. Hopefully, some of the philosophical and theoretical intentions discussed here will also make you a stronger and better developer.

After reading this guide we hope that you'll be able to:

* Understand the way Active Record fits into the MVC model.
* Create basic Active Record models and map them with your database tables.
* Use your models to execute CRUD (Create, Read, Update and Delete) database operations.
* Follow the naming conventions used by Rails to make developing database applications easier and obvious.
* Take advantage of the way Active Record maps it's attributes with the database tables' columns to implement your application's logic. 
* Use Active Record with legacy databases that do not follow the Rails naming conventions.

== What's Active Record

Rails' ActiveRecord is an implementation of Martin Fowler's http://martinfowler.com/eaaCatalog/activeRecord.html[Active Record Design Pattern]. This pattern is based on the idea of creating relations between the database and the application in the following way:

* Each database table is mapped to a class.
* Each table column is mapped to an attribute of this class.
* Each instance of this class is mapped to a single row in the database table.

The definition of the Active Record pattern in Martin Fowler's words:

"_An object that wraps a row in a database table or view, encapsulates the database access, and adds domain logic on that data."_

== Object Relational Mapping

The relation between databases and object-oriented software is called ORM, which is short for "Object Relational Mapping". The purpose of an ORM framework is to minimize the mismatch existent between relational databases and object-oriented software. In applications with a domain model, we have objects that represent both the state of the system and the behaviour of the real world elements that were modeled through these objects. Since we need to store the system's state somehow, we can use relational databases, which are proven to be an excelent approach to data management. Usually this may become a very hard thing to do, since we need to create an object-oriented model of everything that lives in the database, from simple columns to complicated relations between different tables. Doing this kind of thing by hand is a tedious and error prone job. This is where an ORM framework comes in.

== ActiveRecord as an ORM framework

ActiveRecord gives us several mechanisms, being the most important ones the hability to:

* Represent models.
* Represent associations between these models.
* Represent inheritance hierarquies through related models.
* Validate models before they get recorded to the database.
* Perform database operations in an object-oriented fashion.

It's easy to see that the Rails Active Record implementation goes way beyond the basic description of the Active Record Pattern. 

== Active Record inside the MVC model

Active Record plays the role of model inside the MVC structure followed by Rails applications. Since model objects should encapsulate both state and logic of your applications, it's ActiveRecord responsability to deliver you the easiest possible way to recover this data from the database.

== Creating ActiveRecord models

It's very easy to create ActiveRecord models. All you have to do is to subclass the ActiveRecord::Base class and you're good to go:

[source, ruby]
------------------------------------------------------------------
class Product < ActiveRecord::Base; end
------------------------------------------------------------------

This will create a +Product+ model, mapped to a *products* table at the database. By doing this you'll also have the hability to map the columns of each row in that table with the attributes of the instances of your model. So, suppose that the *products* table was created using a SQL sentence like:

[source, sql]
------------------------------------------------------------------
CREATE TABLE products (
   id int(11) NOT NULL auto_increment,
   name varchar(255),
   PRIMARY KEY  (id)
);
------------------------------------------------------------------

Following the table schema above, you would be able to write code like the following:

[source, ruby]
------------------------------------------------------------------
p = Product.new
p.name = "Some Book"
puts p.name # "Some Book"
------------------------------------------------------------------

== Convention over Configuration in ActiveRecord

When writing applications using other programming languages or frameworks, it may be necessary to write a lot of configuration code. This is particulary true for ORM frameworks in general. However, if you follow the conventions adopted by Rails, you'll need to write very little configuration (in some case no configuration at all) when creating ActiveRecord models. The idea is that if you configure your applications in the very same way most of the times then this should be the default way. In this cases, explicity configuration would be needed only in those cases where you can't follow the conventions for any reason.

=== Naming Conventions

By default, ActiveRecord uses some naming conventions to find out how the mapping between models and database tables should be created. It uses two basic strategies to convert between class names and table names:

==== Pluralization

Rails will pluralize your class names to find the respective database table. So, for a class +Book+, you should have a database table called *books*. The Rails pluralization mechanisms are very powerful, being capable to pluralize (and singularize) both regular and irregular words.

== STOPED HERE

Database Table - Plural with underscores separating words i.e. (book_clubs)
Model Class - Singular with the first letter of each word capitalized i.e. (BookClub) 
Here are some additional Examples:

[grid="all"]
`-------------`---------------
Model / Class Table / Schema
----------------------------
Post          posts
LineItem      line_items
Deer          deer
Mouse         mice
Person        people
----------------------------

=== Schema Conventions

To take advantage of some of the magic of Rails database tables must be modeled 
to reflect the ORM decisions that Rails makes.

[grid="all"]
`-------------`---------------------------------------------------------------------------------
Convention
-------------------------------------------------------------------------------------------------
Foreign keys  These fields are named table_id i.e. (item_id, order_id)
Primary Key   Rails automatically creates a primary key column named "id" unless told otherwise.
-------------------------------------------------------------------------------------------------

==== Magic Field Names

When these optional fields are used in your database table definition they give the Active Record
instance additional features. 

NOTE: While these column names are optional they are in fact reserved by ActiveRecord. Steer clear of reserved keywords unless you want the extra functionality. For example, "type" is a reserved keyword
used to designate a table using Single Table Inheritance. If you are not using STI, try an analogous 
keyword like "context", that may still accurately describe the data you are modeling.

[grid="all"]
`------------------------`------------------------------------------------------------------------------
Attribute                 Purpose
------------------------------------------------------------------------------------------------------
created_at / created_on  Rails stores the current date & time to this field when creating the record.
updated_at / updated_on  Rails stores the current date & time to this field when updating the record.
lock_version             Adds optimistic locking to a model link:http://api.rubyonrails.com/classes/ActiveRecord/Locking.html[more about optimistic locking].
type                     Specifies that the model uses Single Table Inheritance link:http://api.rubyonrails.com/classes/ActiveRecord/Base.html[more about STI].
id                       All models require an id. the default is name is "id" but can be changed using the "set_primary_key" or "primary_key" methods.
_table_name_\_count       Can be used to caches the number of belonging objects on the associated class.
------------------------------------------------------------------------------------------------------

By default rails assumes all tables will use “id” as their primary key to identify each record. Though fortunately you won’t have explicitly declare this, Rails will automatically create that field unless you tell it not to.

For example suppose you created a database table called cars:

[source, sql]
-------------------------------------------------------
mysql> CREATE TABLE cars (
         id INT,
         color VARCHAR(100),
         doors INT,
         horses INT,
         model VARCHAR(100)
       );
-------------------------------------------------------

Now you created a class named Car, which is to represent an instance of a record from your table. 

[source, ruby]
------------------------------------------------------- 
class Car
end
-------------------------------------------------------

As you might expect without defining the explicit mappings between your class and the table it is impossible for Rails or any other program to correctly map those relationships.

[source, ruby]
-------------------------------------------------------
>> c = Car.new
=> #<Class:0x11e1e90>
>> c.doors
NoMethodError: undefined method `doors' for #<Class:0x11e1e90>
        from (irb):2
-------------------------------------------------------

Now you could define a door methods to write and read data to and from the database. In a nutshell this is what ActiveRecord does. According to the Rails API: 
“Active Record objects don‘t specify their attributes directly, but rather infer them from the table definition with which they‘re linked. Adding, removing, and changing attributes and their type is done directly in the database. Any change is instantly reflected in the Active Record objects. The mapping that binds a given Active Record class to a certain database table will happen automatically in most common cases, but can be overwritten for the uncommon ones.”
Lets try our Car class again, this time inheriting from ActiveRecord.

[source, ruby]
-------------------------------------------------------
class Car < ActiveRecord::Base
end
-------------------------------------------------------

Now if we try to access an attribute of the table ActiveRecord automatically handles the mappings for us, as you can see in the following example.

[source, ruby]
-------------------------------------------------------
>> c = Car.new
=> #<Car id: nil, doors: nil, color: nil, horses: nil, model: nil>
>> c.doors
=> nil
-------------------------------------------------------

Rails further extends this model by giving each ActiveRecord a way of describing the variety of ways records are associated with one another. We will touch on some of these associations later in the guide but I encourage readers who are interested to read the guide to ActiveRecord associations for an in-depth explanation of the variety of ways rails can model associations.
- Associations between objects controlled by meta-programming macros.

== Philosophical Approaches & Common Conventions
Rails has a reputation of being a zero-config  framework which means that it aims to get you off the ground with as little pre-flight checking as possible. This speed benefit is achieved by following “Convention over Configuration”, which is to say that if you agree to live with the defaults then you benefit from a the inherent speed-boost. As Courtneay Gasking put it to me once “You don’t want to off-road on Rails”. ActiveRecord is no different, while it’s possible to override or subvert any of the conventions of AR, unless you have a good reason for doing so you will probably be happy with the defaults. The following is a list of the common conventions of ActiveRecord

== ActiveRecord Magic
 - timestamps
 - updates

== How ActiveRecord Maps your Database.
- sensible defaults
- overriding conventions

== Growing Your Database Relationships Naturally

== Attributes
 - attribute accessor method. How to override them?
 - attribute?
 - dirty records
 - 
== ActiveRecord handling the CRUD of your Rails application - Understanding the life-cycle of an ActiveRecord

== Validations & Callbacks
see the Validations & Callbacks guide for more info.
