Layouts and Rendering in Rails
=====================================

This guide covers the basic layout features of Action Controller and Action View. By referring to this guide, you will be able to:

* Use the various rendering methods built in to Rails
* Create layouts with multiple content sections
* Use partials to DRY up your views

== Overview: How the Pieces Fit Together

This guide focuses on the interaction between Controller and View in the Model-View-Controller triangle. As you know, the Controller is responsible for orchestrating the whole process of handling a request in Rails, though it normally hands off any heavy code to the Model. But then, when it's time to send a response back to the user, the Controller hands things off to the View. It's that handoff that is the subject of this guide.

In broad strokes, this involves deciding what should be sent as the response and calling an appropriate method to create that response. If the response is a full-blown view, Rails also does some extra work to wrap the view in a layout and possibly to pull in partial views. You'll see all of those paths later in this guide.

== Creating Responses

From the controller's point of view, there are three ways to create an HTTP response:

* Call +render+ to create a full response to send back to the browser
* Call +redirect_to+ to send an HTTP redirect status code to the browser
* Call +head+ to create a response consisting solely of HTTP headers to send back to the browser

I'll cover each of these methods in turn. But first, a few words about the very easiest thing that the controller can do to create a response: nothing at all.

=== Rendering by Default: Convention Over Configuration in Action

You've heard that Rails promotes "convention over configuration." Default rendering is an excellent example of this. By default, controllers in Rails automatically render views with names that correspond to actions. For example, if you have this code in your +BooksController+ class:

[source, ruby]
-------------------------------------------------------
def show
  @book = Book.find(params[:id])
end
-------------------------------------------------------

Rails will automatically render +app/views/books/show.html.erb+ after running the method. In fact, if you have the default catch-all route in place (+map.connect ':controller/:action/:id'+), Rails will even render views that don't have any code at all in the controller. For example, if you have the default route in place and a request comes in for +/books/sale_list+, Rails will render +app/views/books/sale_list.html.erb+ in response.

NOTE: The actual rendering is done by subclasses of +ActionView::TemplateHandlers+. This guide does not dig into that process, but it's important to know that the file extension on your view controls the choice of template handler. In Rails 2, the standard extensions are +.erb+ for ERB (HTML with embedded Ruby), +.rjs+ for RJS (javascript with embedded ruby) and +.builder+ for Builder (XML generator). You'll also find +.rhtml+ used for ERB templates and .rxml for Builder templates, but those extensions are now formally deprecated and will be removed from a future version of Rails.

=== Using +render+

In most cases, the +ActionController::Base#render+ method does the heavy lifting of rendering your application's content for use by a browser. There are a variety of ways to customize the behavior of +render+. You can render the default view for a Rails template, or a specific template, or a file, or inline code, or nothing at all. You can render text, JSON, or XML. You can specify the content type or HTTP status of the rendered response as well.

TIP: If you want to see the exact results of a call to +render+ without needing to inspect it in a browser, you can call +render_to_string+. This method takes exactly the same options as +render+, but it returns a string instead of sending a response back to the browser.

==== Rendering Nothing

Perhaps the simplest thing you can do with +render+ is to render nothing at all:

[source, ruby]
-------------------------------------------------------
render :nothing => true
-------------------------------------------------------

This will send an empty response to the browser (though it will include any status headers you set with the :status option, discussed below).

TIP: You should probably be using the +head+ method, discussed later in this guide, instead of +render :nothing+. This provides additional flexibility and makes it explicit that you're only generating HTTP headers.

==== Using +render+ with +:action+

If you want to render the view that corresponds to a different action within the same template, you can use +render+ with the +:action+ option:

[source, ruby]
-------------------------------------------------------
def update
  @book = Book.find(params[:id])
    if @book.update_attributes(params[:book])
      redirect_to(@book)
    else
      render :action => "edit"
    end
  end
end
-------------------------------------------------------

If the call to +update_attributes_ fails, calling the +update+ action in this controller will render the +edit.html.erb+ template belonging to the same controller.

WARNING: Using +render+ with +:action+ is a frequent source of confusion for Rails newcomers. The specified action is used to determine which view to render, but Rails does _not_ run any of the code for that action in the controller. Any instance variables that you require in the view must be set up in the current action before calling +render+.

==== Using +render+ with +:template+

What if you want to render a template from an entirely different controller from the one that contains the action code? You can do that with the +:template+ option to +render+, which accepts the full path (relative to +app/views+) of the template to render. For example, if you're running code in an +AdminProductsController+ that lives in +app/controllers/admin+, you can render the results of an action to a template in +app/views/products+ this way:

[source, ruby]
-------------------------------------------------------
render :template => 'products/show'
-------------------------------------------------------

==== Using +render+ with +:file+

If you want to use a view that's entirely outside of your application (perhaps you're sharing views between two Rails applications), you can use the +:file+ option to +render+:

[source, ruby]
-------------------------------------------------------
render :file => "/u/apps/warehouse_app/current/app/views/products/show"
-------------------------------------------------------

The +:file+ option takes an absolute file-system path. Of course, you need to have rights to the view that you're using to render the content.

NOTE: By default, if you use the +:file+ option, the file is rendered without using the current layout. If you want Rails to put the file into the current layout, you need to add the +:layout => true+ option

==== Using +render+ with +:inline+

The +render+ method can do without a view completely, if you're willing to use the +:inline+ option to supply ERB as part of the method call. This is perfectly valid:

[source, ruby]
-------------------------------------------------------
render :inline => "<% products.each do |p| %><p><%= p.name %><p><% end %>"
-------------------------------------------------------

WARNING: There is seldom any good reason to use this option. Mixing ERB into your controllers defeats the MVC orientation of Rails and will make it harder for other developers to follow the logic of your project. Use a separate erb view instead.

==== Using +render+ with +:update+

You can also render javascript-based page updates inline using the +:update+ option to +render+:

[source, ruby]
-------------------------------------------------------
render :update do |page|
  page.replace_html 'warning', "Invalid options supplied"
end
-------------------------------------------------------

WARNING: Placing javascript updates in your controller may seem to streamline small updates, but it defeats the MVC orientation of Rails and will make it harder for other developers to follow the logic of your project. I recommend using a separate rjs template instead, no matter how small the update.

==== Rendering Text

You can send plain text - with no markup at all - back to the browser by using the +:text+ option to +render+:

[source, ruby]
-------------------------------------------------------
render :text => "OK"
-------------------------------------------------------

TIP: Rendering pure text is most useful when you're responding to AJAX or web service requests that are expecting something other than proper HTML.

NOTE: By default, if you use the +:text+ option, the file is rendered without using the current layout. If you want Rails to put the text into the current layout, you need to add the +:layout => true+ option

==== Rendering JSON

JSON is a javascript data format used by many AJAX libraries. Rails has built-in support for converting objects to JSON and rendering that JSON back to the browser:

[source, ruby]
-------------------------------------------------------
render :json => @product
-------------------------------------------------------

TIP: You don't need to call +to_json+ on the object that you want to render. If you use the +:json+ option, +render+ will automatically call +to_json+ for you.

==== Rendering XML

Rails also has built-in support for converting objects to XML and rendering that XML back to the caller:

[source, ruby]
-------------------------------------------------------
render :xml => @product
-------------------------------------------------------

TIP: You don't need to call +to_xml+ on the object that you want to render. If you use the +:xml+ option, +render+ will automatically call +to_xml+ for you.

==== Options for +render+

Calls to the +render+ method generally accept four options:

* +:content_type+
* +:layout+
* +:status+
* +:location+

===== The +:content_type+ Option

By default, Rails will serve the results of a rendering operation with the MIME content-type of +text/html+ (or +application/json+ if you use the +:json+ option, or +application/xml+ for the +:xml+ option.). There are times when you might like to change this, and you can do so by setting the +:content_type+ option:

[source, ruby]
-------------------------------------------------------
render :file => filename, :content_type => 'application/rss'
-------------------------------------------------------

===== The +:layout+ Option

With most of the options to +render+, the rendered content is displayed as part of the current layout. You'll learn more about layouts and how to use them later in this guide. To find the current layout, Rails first looks for a file in +app/views/layouts+ with the same base name as the controller. For example, rendering actions from the +PhotosController+ class will use +/app/views/layouts/photos.html.erb+. If there is no such controller-specific layout, Rails will use +/app/views/layouts/application.html.erb+.

You can use the +:layout+ option to tell Rails to use a specific file as the layout for the current action:

[source, ruby]
-------------------------------------------------------
render :layout => 'special_layout'
-------------------------------------------------------

You can also tell Rails to render with no layout at all:

[source, ruby]
-------------------------------------------------------
render :layout => false
-------------------------------------------------------

===== The +:status+ Option

Rails will automatically generate a response with the correct HTML status code (in most cases, this is +200 OK+). You can use the +:status+ option to change this:

[source, ruby]
-------------------------------------------------------
render :status => 500
render :status => :forbidden
-------------------------------------------------------

Rails understands either numeric status codes or symbols for status codes. You can find its list of status codes in +actionpack/lib/action_controller/status_codes.rb+. You can also see there how it maps symbols to status codes in that file.

===== The +:location+ Option

You can use the +:location+ option to set the HTTP +Location+ header:

[source, ruby]
-------------------------------------------------------
render :xml => photo, :location => photo_url(photo)
-------------------------------------------------------

=== Using +redirect_to+

==== Getting a Different Redirect Status Code

=== Using +head+ To Build Header-Only Responses

== Structuring Layouts

=== Include Statements

=== Understanding +yield+

=== Using +content_for+

=== Using Partials

< toc tbd >

== Changelog ==

http://rails.lighthouseapp.com/projects/16213-rails-guides/tickets/15[Lighthouse ticket]

* September 20, 2008: First draft by link:../authors.html#mgunderloy[Mike Gunderloy] (not yet approved for publication)
